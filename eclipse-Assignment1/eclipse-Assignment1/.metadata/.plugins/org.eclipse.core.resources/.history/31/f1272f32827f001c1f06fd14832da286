/**
 */
package Manufacture;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Work Piece Types</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see Manufacture.ManufacturePackage#getWorkPieceTypes()
 * @model instanceClass="Manufacture.WorkPieceTypes"
 * @generated
 */
public enum WorkPieceTypes implements Enumerator {
	/**
	 * The '<em><b>Wood</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #WOOD_VALUE
	 * @generated
	 * @ordered
	 */
	WOOD(0, "wood", "wood"),

	/**
	 * The '<em><b>Metal</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #METAL_VALUE
	 * @generated
	 * @ordered
	 */
	METAL(1, "metal", "metal"), /**
	 * The '<em><b>Other Materials</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #OTHER_MATERIALS_VALUE
	 * @generated
	 * @ordered
	 */
	OTHER_MATERIALS(2, "OtherMaterials", "othermaterials");

	/**
	 * The '<em><b>Wood</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #WOOD
	 * @model name="wood"
	 * @generated
	 * @ordered
	 */
	public static final int WOOD_VALUE = 0;

	/**
	 * The '<em><b>Metal</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #METAL
	 * @model name="metal"
	 * @generated
	 * @ordered
	 */
	public static final int METAL_VALUE = 1;

	/**
	 * The '<em><b>Other Materials</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #OTHER_MATERIALS
	 * @model name="OtherMaterials" literal="othermaterials"
	 * @generated
	 * @ordered
	 */
	public static final int OTHER_MATERIALS_VALUE = 2;

	/**
	 * An array of all the '<em><b>Work Piece Types</b></em>' enumerators.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static final WorkPieceTypes[] VALUES_ARRAY =
		new WorkPieceTypes[] {
			WOOD,
			METAL,
			OTHER_MATERIALS,
		};

	/**
	 * A public read-only list of all the '<em><b>Work Piece Types</b></em>' enumerators.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final List<WorkPieceTypes> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

	/**
	 * Returns the '<em><b>Work Piece Types</b></em>' literal with the specified literal value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param literal the literal.
	 * @return the matching enumerator or <code>null</code>.
	 * @generated
	 */
	public static WorkPieceTypes get(String literal) {
		for (int i = 0; i < VALUES_ARRAY.length; ++i) {
			WorkPieceTypes result = VALUES_ARRAY[i];
			if (result.toString().equals(literal)) {
				return result;
			}
		}
		return null;
	}

	/**
	 * Returns the '<em><b>Work Piece Types</b></em>' literal with the specified name.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param name the name.
	 * @return the matching enumerator or <code>null</code>.
	 * @generated
	 */
	public static WorkPieceTypes getByName(String name) {
		for (int i = 0; i < VALUES_ARRAY.length; ++i) {
			WorkPieceTypes result = VALUES_ARRAY[i];
			if (result.getName().equals(name)) {
				return result;
			}
		}
		return null;
	}

	/**
	 * Returns the '<em><b>Work Piece Types</b></em>' literal with the specified integer value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the integer value.
	 * @return the matching enumerator or <code>null</code>.
	 * @generated
	 */
	public static WorkPieceTypes get(int value) {
		switch (value) {
			case WOOD_VALUE: return WOOD;
			case METAL_VALUE: return METAL;
			case OTHER_MATERIALS_VALUE: return OTHER_MATERIALS;
		}
		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private final int value;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private final String name;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private final String literal;

	/**
	 * Only this class can construct instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private WorkPieceTypes(int value, String name, String literal) {
		this.value = value;
		this.name = name;
		this.literal = literal;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getValue() {
	  return value;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getName() {
	  return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getLiteral() {
	  return literal;
	}

	/**
	 * Returns the literal value of the enumerator, which is its string representation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		return literal;
	}
	
} //WorkPieceTypes

/**
 */
package Step1.impl;

import Step1.Step1Package;
import Step1.SubStep2;
import Step1.SubSubStep2;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sub Sub Step2</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link Step1.impl.SubSubStep2Impl#getSubstep2 <em>Substep2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SubSubStep2Impl extends MinimalEObjectImpl.Container implements SubSubStep2 {
	/**
	 * The cached value of the '{@link #getSubstep2() <em>Substep2</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSubstep2()
	 * @generated
	 * @ordered
	 */
	protected EList<SubStep2> substep2;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubSubStep2Impl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return Step1Package.Literals.SUB_SUB_STEP2;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<SubStep2> getSubstep2() {
		if (substep2 == null) {
			substep2 = new EObjectContainmentEList<SubStep2>(SubStep2.class, this, Step1Package.SUB_SUB_STEP2__SUBSTEP2);
		}
		return substep2;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case Step1Package.SUB_SUB_STEP2__SUBSTEP2:
				return ((InternalEList<?>)getSubstep2()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case Step1Package.SUB_SUB_STEP2__SUBSTEP2:
				return getSubstep2();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case Step1Package.SUB_SUB_STEP2__SUBSTEP2:
				getSubstep2().clear();
				getSubstep2().addAll((Collection<? extends SubStep2>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case Step1Package.SUB_SUB_STEP2__SUBSTEP2:
				getSubstep2().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case Step1Package.SUB_SUB_STEP2__SUBSTEP2:
				return substep2 != null && !substep2.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //SubSubStep2Impl
